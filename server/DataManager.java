/* Thomas Keane, 11:56 AM 2/05/04
This class must be extended by a user of the system to implement a distributed computation.
This is used to generate the data units and handle the results for the problem.

Copyright (C) 2003  Thomas Keane

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/

import java.util.*;
import java.io.File;

/**
 * This subclass is used by the system to generate the data units and handle the results for the problem.
 * This class must be extended by a user of the system to implement their distributed computation.
 * The user must implement all of the abstract methods.
 *@author Thomas Keane
*/
public abstract class DataManager
{
	/** The problem's working directory on the server */
	public static File PROBLEMDIRECTORY;

	//called by the system to generate data units to process
	//implemented by subclasses
	/** Generates units to send to clients. 
	* @return Vector containing the unit data
	*/
	public abstract Vector generateWorkUnit() throws Throwable;

	//results returned from processed data units are sent to this method
	//implemented by subclasses
	/** Processes each set of results received for the particular problem
	* @param uID unit ID (generated by the server automatically)
	* @param results the set of results returned by the processUnit() method of the Algorithm
	* @return true if the problem is finished, otherwise false
	*/
	public abstract boolean processResults( Long uID, Vector results ) throws Throwable;

	//method called by system to get problem to adjust granularity of units by a +/- %
	//based on last 100 results
	/** Called by the system to adjust the granularity of problem (calculated from the average processing time for units)
	* @param percent How much to adjust the granularity of the problem by
	*/
	public abstract void adjustGranularity( int percent ) throws Throwable;

	//method that returns info about the status of the problem
	//implemented by subclasses
	/** Called every time the remote interface connects and requests the current status of the problem
	* @return a string with information about the current status of the problem
	*/
	public abstract String getStatus() throws Throwable;

	//method that is implemented by programmer
	//purpose is to close any streams (e.g. files) so that the directory can be edited by system
	/** Called when the problem is being removed from the system - should close any open streams etc.
	*/
	public abstract void closeResources() throws Throwable;
}